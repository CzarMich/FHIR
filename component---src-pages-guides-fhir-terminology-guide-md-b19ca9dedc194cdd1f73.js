(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{416:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",function(){return i}),a.d(t,"default",function(){return s});a(13),a(7),a(8),a(5),a(12),a(0);var r=a(107),n=a(435);a(4);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var i={},l={_frontmatter:i},c=n.a;function s(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(r.b)(c,o({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"The IBM FHIR Server Terminology module (",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/IBM/FHIR/tree/master/fhir-term"}),"fhir-term"),") provides a FHIR terminology service provider interface (SPI) and a default implementation that implements terminology services using ",Object(r.b)("inlineCode",{parentName:"p"},"ConceptMap"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ValueSet"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"ConceptMap")," resources that have been made available through the FHIR registry module (",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/IBM/FHIR/tree/master/fhir-registry"}),"fhir-registry"),")."),Object(r.b)("h2",{id:"fhir-terminology-service-provider-interface-spi"},"FHIR Terminology Service Provider Interface (SPI)"),Object(r.b)("p",null,"The FHIR Terminology Service Provider interface provides a mechanism for implementers to provide terminology capabilities via the Java ServiceLoader. The interface includes method signatures for ",Object(r.b)("inlineCode",{parentName:"p"},"expand"),", ",Object(r.b)("inlineCode",{parentName:"p"},"lookup"),", ",Object(r.b)("inlineCode",{parentName:"p"},"subsumes"),", ",Object(r.b)("inlineCode",{parentName:"p"},"closure"),", ",Object(r.b)("inlineCode",{parentName:"p"},"validateCode")," (CodeSystem) and ",Object(r.b)("inlineCode",{parentName:"p"},"validateCode")," (ValueSet). Here is an excerpt (for brevity) of the SPI:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-java"}),"public interface FHIRTermServiceProvider {\n    boolean isExpandable(ValueSet valueSet);\n    ValueSet expand(ValueSet valueSet, ExpansionParameters parameters);\n    LookupOutcome lookup(Coding coding, LookupParameters parameters);\n    ConceptSubsumptionOutcome subsumes(Coding codingA, Coding codingB);\n    Set<Concept> closure(Coding coding);\n    ValidationOutcome validateCode(CodeSystem codeSystem, Coding coding, ValidationParameters parameters);\n    ValidationOutcome validateCode(CodeSystem codeSystem, CodeableConcept codeableConcept, ValidationParameters parameters);\n    ValidationOutcome validateCode(ValueSet valueSet, Coding coding, ValidationParameters parameters);\n    ValidationOutcome validateCode(ValueSet valueSet, CodeableConcept codeableConcept, ValidationParameters parameters);\n    TranslationOutcome translate(ConceptMap conceptMap, Coding coding, TranslationParameters parameters);\n    TranslationOutcome translate(ConceptMap conceptMap, CodeableConcept codeableConcept, TranslationParameters parameters);\n}\n\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"expand "),", ",Object(r.b)("inlineCode",{parentName:"p"},"lookup"),", ",Object(r.b)("inlineCode",{parentName:"p"},"validateCode")," (CodeSystem), ",Object(r.b)("inlineCode",{parentName:"p"},"validateCode")," (ValueSet), and ",Object(r.b)("inlineCode",{parentName:"p"},"translate")," methods support the passing of optional parameters (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"ExpansionParameters"),", ",Object(r.b)("inlineCode",{parentName:"p"},"LookupParameters"),", etc.). Many of the methods also return an “outcome” object. These “parameter” and “outcome” objects are modeled after the input/output parameters specified in the terminology operations from the FHIR Terminology module: ",Object(r.b)("a",o({parentName:"p"},{href:"http://hl7.org/fhir/terminology-module.html"}),"http://hl7.org/fhir/terminology-module.html"),"."),Object(r.b)("p",null,"The “parameter” objects can be created from a ",Object(r.b)("inlineCode",{parentName:"p"},"Parameters")," resource:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-java"}),"Parameters parameters = ...;\nExpansionParameters expansionParameters = ExpansionParameters.from(parameters);\n")),Object(r.b)("p",null,"The “outcome” objects can be converted to a Parameters resource:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-java"}),"LookupOutcome outcome = ...;\nParameters parameters = outcome.toParameters();\n")),Object(r.b)("p",null,"This bridge to/from the ",Object(r.b)("inlineCode",{parentName:"p"},"Parameters")," resource enables implementers to build both native implementations of the SPI and implementations that access an existing external terminology service."),Object(r.b)("h2",{id:"default-terminology-service-provider-implementation"},"Default Terminology Service Provider Implementation"),Object(r.b)("p",null,"The default implementation of ",Object(r.b)("inlineCode",{parentName:"p"},"FHIRTermServiceProvider")," (",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/IBM/FHIR/blob/master/fhir-term/src/main/java/com/ibm/fhir/term/service/provider/DefaultTermServiceProvider.java"}),"DefaultTermServiceProvider"),") leverages terminology resources (",Object(r.b)("inlineCode",{parentName:"p"},"CodeSystem"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ValueSet"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"ConceptMap"),") that have been made available through the FHIR registry module (",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/IBM/FHIR/tree/master/fhir-registry"}),"fhir-registry"),"). It supports ",Object(r.b)("inlineCode",{parentName:"p"},"CodeSystem")," resources with ",Object(r.b)("em",{parentName:"p"},"complete")," content (",Object(r.b)("inlineCode",{parentName:"p"},"CodeSystem.content = 'complete'"),") and ",Object(r.b)("inlineCode",{parentName:"p"},"ValueSet")," resources that reference ",Object(r.b)("inlineCode",{parentName:"p"},"CodeSystem")," resources that have complete content. The default implementation does not support for optional parameters (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"ExpansionParameters"),", ",Object(r.b)("inlineCode",{parentName:"p"},"TranslationParameters"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ValidationParameters"),", etc.)."),Object(r.b)("h2",{id:"fhir-terminology-service-singleton-facade"},"FHIR Terminology Service Singleton facade"),Object(r.b)("p",null,"The FHIR Terminology Service Singleton facade (",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/IBM/FHIR/blob/master/fhir-term/src/main/java/com/ibm/fhir/term/service/FHIRTermService.java"}),"FHIRTermService"),") loads a ",Object(r.b)("inlineCode",{parentName:"p"},"FHIRTermServiceProvider")," from the ServiceLoader, if one exists. Otherwise, it will instantiate a ",Object(r.b)("inlineCode",{parentName:"p"},"DefaultTermServiceProvider"),". Other FHIR server components and user code (Java) that requires terminology capabilities should access them via the ",Object(r.b)("inlineCode",{parentName:"p"},"FHIRTermService")," singleton facade. Here is an example:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-java"}),'ValueSet valueSet = ValueSetSupport.getValueSet("http://ibm.com/fhir/ValueSet/vs1");\nCoding coding = Coding.builder()\n        .system(Uri.of("http://ibm.com/fhir/CodeSystem/cs1"))\n        .version(string("1.0.0"))\n        .code(Code.of("a")\n        .display(string("concept a")\n        .build();\nValidationOutcome outcome = FHIRTermService.getInstance().validateCode(valueSet, coding);\n')),Object(r.b)("h2",{id:"fhir-server-terminology-extended-operations"},"FHIR Server Terminology Extended Operations"),Object(r.b)("p",null,"The FHIR terminology operations module (",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/IBM/FHIR/tree/master/fhir-operation-term"}),"fhir-operation-term"),") connects the FHIR Server REST layer to the FHIR terminology module via the operations framework. This module implements the terminology operations as defined in the FHIR terminology service specification ",Object(r.b)("a",o({parentName:"p"},{href:"http://hl7.org/fhir/terminology-service.html"}),"http://hl7.org/fhir/terminology-service.html"),". One exception is the ",Object(r.b)("inlineCode",{parentName:"p"},"$closure")," operation. The ",Object(r.b)("inlineCode",{parentName:"p"},"$closure")," operation is experimental and does not support versioning or replay. This means that the ",Object(r.b)("inlineCode",{parentName:"p"},"$closure")," operation will always return the set of closure table entries for the given input concepts and does not store client state."),Object(r.b)("h2",{id:"fhirpath-terminology-functions"},"FHIRPath Terminology Functions"),Object(r.b)("p",null,"The FHIRPath module (",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/IBM/FHIR/tree/master/fhir-path"}),"fhir-path"),") has been updated to support implementations of the draft FHIRPath terminology function specification: ",Object(r.b)("a",o({parentName:"p"},{href:"http://hl7.org/fhir/fhirpath.html#txapi"}),"http://hl7.org/fhir/fhirpath.html#txapi"),". Support for the following functions (accessed through the ",Object(r.b)("inlineCode",{parentName:"p"},"%terminologies")," constant) has been implemented:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{}),"%terminologies.expand(valueSet, params) : ValueSet\n%terminologies.lookup(coded, params) : Parameters\n%terminologies.validateVS(valueSet, coded, params) : Parameters\n%terminologies.validateCS(codeSystem, coded, params) : Parameters\n%terminologies.subsumes(system, coded1, coded2, params) : code\n%terminologies.translate(conceptMap, code, params) : Parameters\n")),Object(r.b)("p",null,"Here is the same example from above but going through the FHIRPath evaluator:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-java"}),'Coding coding = Coding.builder()\n        .system(Uri.of("http://ibm.com/fhir/CodeSystem/cs1"))\n        .version(string("1.0.0"))\n        .code(Code.of("a")\n        .display(string("concept a")\n        .build();\nCollection<FHIRPathNode> initialContext = singleton(FHIRPathElementNode.elementNode(coding));\nFHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\nCollection<FHIRPathNode> result = evaluator.evaluate("%terminologies.validateCode(\'http://ibm.com/fhir/ValueSet/vs1\', %context)");\n\n')),Object(r.b)("p",null,"Additionally, the FHIRPath functions ",Object(r.b)("inlineCode",{parentName:"p"},"subsumedBy")," and ",Object(r.b)("inlineCode",{parentName:"p"},"subsumes")," have been implemented per: ",Object(r.b)("a",o({parentName:"p"},{href:"http://hl7.org/fhir/fhirpath.html#functions"}),"http://hl7.org/fhir/fhirpath.html#functions")))}s.isMDXComponent=!0},433:function(e){e.exports={data:{site:{pathPrefix:"/FHIR"}}}},434:function(e){e.exports={data:{site:{siteMetadata:{repository:{baseUrl:"https://github.com/IBM/FHIR",subDirectory:"/docs"}}}}}},435:function(e,t,a){"use strict";a(39),a(29);var r=a(433),n=a(0),o=a.n(n),i=a(106),l=a.n(i),c=a(202),s=a(131),p=a(6),m=a.n(p),b=a(407),d=a(4),u=function(e){var t,a=e.title,r=e.tabs,n=void 0===r?[]:r;return Object(d.b)("div",{className:m()(b.pageHeader,(t={},t[b.withTabs]=n.length,t))},Object(d.b)("div",{className:"bx--grid"},Object(d.b)("div",{className:"bx--row"},Object(d.b)("div",{className:"bx--col-lg-12"},Object(d.b)("h1",{id:"page-title",className:b.text},a)))))},h=a(434),g=a(408),v=function(e){var t=e.relativePagePath,a=e.repository,r=h.data.site.siteMetadata.repository,n=a||r,o=n.baseUrl,i=o+"/tree/master"+n.subDirectory+"/src/pages"+t;return o?Object(d.b)("div",{className:"bx--row "+g.row},Object(d.b)("div",{className:"bx--col"},Object(d.b)("a",{className:g.link,href:i},"Edit this page on GitHub"))):null},f=a(200),O=a(32),j=a(409);var C=function(e){var t,a;function r(){return e.apply(this,arguments)||this}return a=e,(t=r).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a,r.prototype.render=function(){var e=this.props,t=e.tabs,a=e.slug,r=a.split("/").filter(Boolean).slice(-1)[0],n=t.map(function(e){var t,n=l()(e,{lower:!0}),o=n===r,i=a.replace(r,n);return Object(d.b)("li",{key:e,className:m()((t={},t[j.selectedItem]=o,t),j.listItem)},Object(d.b)(O.Link,{className:j.link,to:""+i},e))});return Object(d.b)("div",{className:j.tabsContainer},Object(d.b)("div",{className:"bx--grid"},Object(d.b)("div",{className:"bx--row"},Object(d.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(d.b)("nav",null,Object(d.b)("ul",{className:j.list},n))))))},r}(o.a.Component),y=a(201);t.a=function(e){var t=e.pageContext,a=e.children,n=e.location,o=t.frontmatter,i=void 0===o?{}:o,p=t.relativePagePath,m=t.titleType,b=i.tabs,h=i.title,g=i.theme,O=i.description,j=i.keywords,N=r.data.site.pathPrefix,S=N?n.pathname.replace(N,""):n.pathname,I=b?S.split("/").slice(-1)[0]||l()(b[0],{lower:!0}):"";return Object(d.b)(s.a,{homepage:!1,theme:g,pageTitle:h,pageDescription:O,pageKeywords:j,titleType:m},Object(d.b)(u,{title:h,label:"label",tabs:b}),b&&Object(d.b)(C,{slug:S,tabs:b,currentTab:I}),Object(d.b)(y.a,{padded:!0},a,Object(d.b)(v,{relativePagePath:p})),Object(d.b)(f.a,{pageContext:t,location:n,slug:S,tabs:b,currentTab:I}),Object(d.b)(c.a,null))}}}]);
//# sourceMappingURL=component---src-pages-guides-fhir-terminology-guide-md-b19ca9dedc194cdd1f73.js.map